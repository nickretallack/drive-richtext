// Generated by CoffeeScript 1.7.1
(function() {
  var APP_ID, CLIENT_ID, apply_format, authorize, delete_text, get_attributes_at_index, init_share, insert_text, onFileLoaded, printExceptions, quill, realtimeUtils, start;

  CLIENT_ID = '661099579330-dctm6hcm5co8jt8ug7qreu1kfn1t9ru3.apps.googleusercontent.com';

  APP_ID = CLIENT_ID.split('-')[0];

  realtimeUtils = new utils.RealtimeUtils({
    clientId: CLIENT_ID
  });

  quill = new Quill('#editor');

  init_share = function() {
    var id, share;
    id = realtimeUtils.getParam('id');
    share = new gapi.drive.share.ShareClient(APP_ID);
    share.setItemIds(id);
    $('#share-button').show().on('click', function(event) {
      return share.showSettingsDialog();
    });
  };

  authorize = function() {
    realtimeUtils.authorize((function(response) {
      var button;
      if (response.error) {
        button = $('#auth-button');
        button.show().on('click', function() {
          realtimeUtils.authorize((function(response) {
            start();
          }), true);
        });
      } else {
        start();
      }
    }), false);
  };

  start = function() {
    var id;
    id = realtimeUtils.getParam('id');
    if (id) {
      realtimeUtils.load(id.replace('/', ''), onFileLoaded);
    } else {
      realtimeUtils.createRealtimeFile('New Quickstart File', function(createResponse) {
        window.history.pushState(null, null, '?id=' + createResponse.id);
        realtimeUtils.load(createResponse.id, onFileLoaded);
      });
    }
  };

  get_attributes_at_index = function(index) {
    if (index === 0) {
      return null;
    }
    return quill.getContents(index - 1, index).ops[0].attributes;
  };

  apply_format = function(item, value) {
    console.log('APPLY FORMAT', item.get('start').index, item.get('end').index, item.get('attribute'), value);
    quill.formatText(item.get('start').index, item.get('end').index, item.get('attribute'), value);
  };

  insert_text = function(index, text) {
    var attributes;
    attributes = get_attributes_at_index(index);
    quill.insertText(index, text, attributes);
  };

  delete_text = function(index, text) {
    quill.deleteText(index, index + text.length);
  };

  printExceptions = function(fun) {
    return function() {
      var error;
      try {
        return fun.apply(null, arguments);
      } catch (_error) {
        error = _error;
        return console.log(error);
      }
    };
  };

  onFileLoaded = printExceptions(function(doc) {
    var find_attribute_changes, model, preview_overlay, remove_overlay_preview, render_overlay, richtext, root;
    init_share();
    preview_overlay = function(item) {
      var node;
      node = render_overlay(item);
      $('#overlays tbody').append(node);
      item.get('start').addEventListener(gapi.drive.realtime.EventType.REFERENCE_SHIFTED, function(event) {
        node.find('.start').text(event.newIndex);
      });
      item.get('end').addEventListener(gapi.drive.realtime.EventType.REFERENCE_SHIFTED, function(event) {
        node.find('.end').text(event.newIndex);
      });
    };
    render_overlay = function(item) {
      console.log('previewing ', item.get('id'));
      return $('<tr id="overlay-' + item.get('id') + '">' + '<td class="attribute">' + item.get('attribute') + '</td>' + '<td class="start">' + item.get('start').index + '</td>' + '<td class="end">' + item.get('end').index + '</td>' + '<td class="id">' + item.get('id') + '</td>' + '</tr>');
    };
    remove_overlay_preview = function(item) {
      console.log('unpreviewing ', item.get('id'));
      $('#overlays tbody #overlay-' + item.get('id')).remove();
    };
    find_attribute_changes = function(old_attributes, new_attributes) {
      var attribute;
      var attribute, attributes;
      attributes = {};
      for (attribute in new_attributes) {
        if (!(old_attributes && attribute in old_attributes)) {
          attributes[attribute] = new_attributes[attribute];
        }
      }
      for (attribute in old_attributes) {
        if (!(new_attributes && attribute in new_attributes)) {
          attributes[attribute] = null;
        }
      }
      return attributes;
    };
    console.log('LOADED');
    model = doc.getModel();
    root = model.getRoot();
    richtext = new CollaborativeRichText({
      model: model,
      parent: root,
      name: 'richtext',
      handlers: {
        insert_text: insert_text,
        delete_text: delete_text,
        apply_format: apply_format,
        preview_add_overlay: preview_overlay,
        preview_remove_overlay: remove_overlay_preview
      }
    });
    quill.on('text-change', function(delta, source) {
      var attributes, new_text_index, operation, operation_index, text_index;
      if (source === 'user') {
        text_index = 0;
        new_text_index = null;
        for (operation_index in delta.ops) {
          operation = delta.ops[operation_index];
          if (operation.retain) {
            richtext.formatText(text_index, operation.retain, operation.attributes);
            text_index += operation.retain;
          }
          if (operation.insert) {
            console.log('insert...', operation.insert);
            attributes = find_attribute_changes(get_attributes_at_index(text_index), operation.attributes);
            richtext.insertText(text_index, operation.insert, attributes);
            text_index += operation.insert.length;
          }
          if (operation["delete"]) {
            console.log('delete...', operation["delete"]);
            richtext.deleteText(text_index, operation["delete"]);
            text_index += operation["delete"];
          }
        }
      }
    });
  });

  quill.addModule('toolbar', {
    container: '#toolbar'
  });

  authorize();

}).call(this);
